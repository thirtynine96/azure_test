# ########################################################
# # Azure login
# ########################################################
# az login
# az account list -o table
# az account show --query id --output tsv

# ## 구독 지정
# SUBSCRIPTION='xxxxxxxxxxxxxxxxxx' # multicloud enabling
# az account set -s $SUBSCRIPTION


# # azure resource group 확인
# az group list --output table

# # RESOURCE_GROUP='network-na13d'
# # RESOURCE_GROUP='aks-na13d'
# # RESOURCE_GROUP='aks2-na13d-cluster'
# RESOURCE_GROUP='01_dustinAksRg_1'

# az group show --name $RESOURCE_GROUP --output table

# ##### 제일 많이 사용 ####
# # azure resource 확인 (특정 resource group 에 속한)
# az resource list --resource-group $RESOURCE_GROUP --output table


# ########################################################
# # Azure Cosmos DB 배포
# # Docs: https://docs.microsoft.com/ko-kr/azure/cosmos-db/create-mongodb-dotnet#create-the-cosmos-db-account
# # Docs: https://docs.microsoft.com/ko-kr/azure/cosmos-db/create-mongodb-dotnet#create-the-database-and-collection
# ########################################################

# # Check the cosmos db list in my account
# az cosmosdb list --resource-group $RESOURCE_GROUP

# # Create a cosmos db to store the data
# # Docs: https://docs.microsoft.com/ko-kr/azure/cosmos-db/create-mongodb-dotnet#create-the-cosmos-db-account
# az cosmosdb create --name dustincosmosdb --resource-group $RESOURCE_GROUP --kind GlobalDocumentDB --locations regionName=eastus


# # AKS Pod is in private subnet and cosmod db is in other private subnet. AKS pod should be able to access cosmos db
# # Docs: https://docs.microsoft.com/ko-kr/azure/cosmos-db/how-to-setup-private-endpoints
# # Docs: https://docs.microsoft.com/ko-kr/azure/cosmos-db/how-to-configure-private-endpoints
# # Docs: https://docs.microsoft.com/ko-kr/azure/cosmos-db/how-to-configure-private-endpoints-portal
# az role assignment create --assignee $AKS_MANAGED_ID --role "Cosmos DB Account Reader Role" --scope $COSMOSDB_ID



# # cosmosdb 생성 후, 다음 명령어로 접근 가능한지 확인한다. 
# az cosmosdb keys list --name mycosmosdb --resource-group myResourceGroup --type keys

# ########################################################
# # AKS Cluster에 Cosmos DB 연결
# ########################################################
# # 1. Cosmos DB 프라이빗 엔드포인트 생성 Cosmos DB 계정에 대한 프라이빗 엔드포인트를 생성합니다. 이렇게 하면 AKS 클러스터의 프라이빗 서브넷에서 Cosmos DB에 안전하게 액세스할 수 있습니다.
# # 2. AKS 클러스터 관리 ID에 Cosmos DB 역할 할당 AKS 클러스터의 관리 ID에 Cosmos DB 계정에 대한 적절한 역할(예: Cosmos DB Account Reader Role)을 할당합니다. 이를 통해 AKS 클러스터가 Cosmos DB에 액세스할 수 있는 권한을 부여받습니다.
# AKS_MANAGED_ID=$(az aks show --name $AKS_CLUSTER_NAME --resource-group $RESOURCE_GROUP --query identity.principalId -o tsv)
# COSMOSDB_ID=$(az cosmosdb show --name $COSMOSDB_NAME --resource-group $RESOURCE_GROUP --query id -o tsv)
# az role assignment create --assignee $AKS_MANAGED_ID --role "Cosmos DB Account Reader Role" --scope $COSMOSDB_ID

# # 3. Kubernetes Secret 생성 Cosmos DB 연결 문자열을 Kubernetes Secret으로 생성합니다. 이 Secret은 애플리케이션 Pod에서 Cosmos DB에 액세스하는 데 사용됩니다.
# COSMOS_CONNECTION_STRING=$(az cosmosdb keys list --name $COSMOSDB_NAME --resource-group $RESOURCE_GROUP --type connection-strings --query 'connectionStrings[0].connectionString' -o tsv)
# kubectl create secret generic cosmos-db-secret --from-literal=connection-string="$COSMOS_CONNECTION_STRING"

# # 4. 애플리케이션 배포 애플리케이션을 배포할 때 위에서 생성한 Secret을 사용하도록 구성합니다. 예를 들어, 환경 변수로 Secret을 참조하거나 볼륨으로 마운트할 수 있습니다.
# # deployment.yaml
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: my-app
# spec:
#   ...
#   template:
#     ...
#     spec:
#       containers:
#       - name: my-app
#         env:
#         - name: COSMOS_CONNECTION_STRING
#           valueFrom:
#             secretKeyRef:
#               name: cosmos-db-secret
#               key: connection-string
# ---
