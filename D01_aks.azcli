########################################################
# Azure login
########################################################
az login
az account list -o table

## 구독 지정
# SUBSCRIPTION='9038eb5a-8bbe-479e-a36d-35c0273b6a8d' # iot.releng
# SUBSCRIPTION='d9d7ba9c-6930-4758-a3de-2f2bb48756bf' # iot.dev
SUBSCRIPTION='4a14435c-14b8-42fa-99b5-3d513b52fc23' # multicloud enabling
az account set -s $SUBSCRIPTION


# azure resource group 확인
az group list --output table

# RESOURCE_GROUP='network-na13d'
# RESOURCE_GROUP='aks-na13d'
# RESOURCE_GROUP='aks2-na13d-cluster'
RESOURCE_GROUP='01_dustinAksRg_1'
az group show --name $RESOURCE_GROUP --output table

##### 제일 많이 사용 ####
# azure resource 확인 (특정 resource group 에 속한)
az resource list --resource-group $RESOURCE_GROUP --output table

########################################################
# AKS 리소스 그룹 생성하기
########################################################
# 리소스 그룹 생성
RESOURCE_GROUP='01_dustinAksRg_1'
LOCATION='koreacentral'
az group create -n $RESOURCE_GROUP -l $LOCATION
#az group update --resource-group $RESOURCE_GROUP --set tags.CostCenter='{"Dept":"IT","Environment":"Test"}'


# Provider register 목록확인 (리소스 공급자가 등록되어 있어야 함)
az provider list --query "[?registrationState=='Registered'].{Provider:namespace, Status:registrationState}" --out table
az provider list --out table


# Provider register 등록
az provider register -n Microsoft.OperationsManagement
az provider register -n Microsoft.OperationalInsights
az provider register -n Microsoft.ContainerService
az provider register -n Microsoft.ContainerRegistry

# 리소스 그룹 삭제
az group delete -n $RESOURCE_GROUP --no-wait --yes

########################################################
# VNET 생성 / NSG 생성
########################################################

# Network Security Group (NSG) 생성
NSG1='dustinNSG1'
NSG2='dustinNSG2'
NSG3='dustinNSG3'
NSG4='dustinNSG4'
az network nsg create --resource-group $RESOURCE_GROUP --name $NSG1 --location $LOCATION
az network nsg create --resource-group $RESOURCE_GROUP --name $NSG2 --location $LOCATION
az network nsg create --resource-group $RESOURCE_GROUP --name $NSG3 --location $LOCATION
az network nsg create --resource-group $RESOURCE_GROUP --name $NSG4 --location $LOCATION

# Vnet 및 public subnet 생성
VNET_NAME='dustinVnet_ap01'
PUB_SUB_NET1='PublicSubnet1'
az network vnet create \
  --resource-group $RESOURCE_GROUP \
  --name $VNET_NAME \
  --address-prefix 10.30.0.0/16 \
  --location $LOCATION \
  --subnet-name $PUB_SUB_NET1 \
  --subnet-prefix 10.30.1.0/24 \
  --network-security-group $NSG1

# Vnet cidr 변경 update
# az network vnet update \
#   --address-prefix 10.10.0.0/8 \
#   --name $VNET_NAME \
#   --resource-group $RESOURCE_GROUP

# 생성한 Subnet 확인
az network vnet subnet show --resource-group $RESOURCE_GROUP --vnet-name $VNET_NAME --name $PUB_SUB_NET1


# Vnet 삭제
az network vnet delete --resource-group $RESOURCE_GROUP --name $VNET_NAME

# 리소스 그룹의 모든 vnet 확인
az network vnet list
az network vnet list -g $RESOURCE_GROUP

########################################################
# Subnet 구성 (AG용, Ingress용, PrivateLinkd용, DB용) 
########################################################
# - https://learn.microsoft.com/ko-kr/azure/architecture/reference-architectures/containers/aks/baseline-aks
# - https://learn.microsoft.com/ko-kr/azure/architecture/reference-architectures/containers/aks-multi-region/aks-multi-cluster

# Private Subnet 생성 및 NSG 적용
PRIV_SUB_NET1='PrivateSubnet1'  # node subnet
PRIV_SUB_NET2='PrivateSubnet2'  # pod subnet (nodepool1)
PRIV_SUB_NET3='PrivateSubnet3'  # pod subnet (nodepool2)

az network vnet subnet create \
  --resource-group $RESOURCE_GROUP \
  --vnet-name $VNET_NAME \
  --name $PRIV_SUB_NET1 \
  --address-prefix 10.30.2.0/24 \
  --network-security-group $NSG2

az network vnet subnet create \
  --resource-group $RESOURCE_GROUP \
  --vnet-name $VNET_NAME \
  --name $PRIV_SUB_NET2 \
  --address-prefix 10.30.3.0/24 \
  --network-security-group $NSG3
  

az network vnet subnet create \
  --resource-group $RESOURCE_GROUP \
  --vnet-name $VNET_NAME \
  --name $PRIV_SUB_NET3 \
  --address-prefix 10.30.4.0/24 \
  --network-security-group $NSG4

# 생성한 Subnet 확인
az network vnet subnet show --resource-group $RESOURCE_GROUP --name $PRIV_SUB_NET1 --vnet-name $VNET_NAME
az network vnet subnet show --resource-group $RESOURCE_GROUP --name $PRIV_SUB_NET2 --vnet-name $VNET_NAME

# Subnet list 목록 확인
az network vnet subnet list --resource-group $RESOURCE_GROUP --vnet-name $VNET_NAME --output table

# Subnet 삭제
az network vnet subnet delete --name $PRIV_SUB_NET1 --resource-group $RESOURCE_GROUP --vnet-name $VNET_NAME
az network vnet subnet delete --name $PRIV_SUB_NET1 --resource-group $RESOURCE_GROUP --vnet-name $VNET_NAME
az network vnet subnet delete --name $PRIV_SUB_NET2 --resource-group $RESOURCE_GROUP --vnet-name $VNET_NAME

########################################################
# NAT Gateway 생성 / Public IP 생성
########################################################

# Public IP 생성
PUBLIC_IP_NAME='NATGWpubIP'
az network public-ip create \
  --resource-group $RESOURCE_GROUP \
  --name $PUBLIC_IP_NAME \
  --sku Standard \
  --location $LOCATION \
  --zone 1 2 3

# NAT Gateway 생성
NAT_GW_NAME='dustinNatGW_01'
az network nat gateway create \
  --resource-group $RESOURCE_GROUP \
  --name $NAT_GW_NAME \
  --location $LOCATION \
  --public-ip-addresses $PUBLIC_IP_NAME \
  --idle-timeout 10


# Public Subnet 에 NAT Gateway 연결
az network vnet subnet update \
  --resource-group $RESOURCE_GROUP \
  --vnet-name $VNET_NAME \
  --name $PUB_SUB_NET1 \
  --nat-gateway $NAT_GW_NAME

# NAT GW 확인
az network nat gateway show --resource-group $RESOURCE_GROUP --name $NAT_GW_NAME


########################################################
# ACR 생성
########################################################
# Ref. 
# - https://microsoftlearning.github.io/AZ500-AzureSecurityTechnologies.ko-kr/Instructions/Labs/LAB_04_ConfiguringandSecuringACRandAKS.html
##  This is mandantory link which you must see.
########################################################
# Azure Container Registry 생성
ACR_NAME='dustinacr01'
az acr create -g $RESOURCE_GROUP -n $ACR_NAME \
  --sku Basic --admin-enabled true


# ACR 자격 증명 가져오기
ACR_PASSWORD=$(az acr credential show -n $ACR_NAME \
  --query "passwords[0].value" -o tsv)

LOGIN_SERVER=$(az acr show -n $ACR_NAME \
  --query loginServer -o tsv)

# ACR 목록 확인
az acr list --resource-group $RESOURCE_GROUP --output table

# ACR 로그인 서버 확인
az acr show --name $ACR_NAME --query loginServer
az acr repository list -n $ACR_NAME


########################################################
# Container Image 생성 및 ACR 에 업로드
# 1. Dockerfile 생성
# 2. Container Image Build 
# 3. ACR 에 Image upload
########################################################
# Ref.
# - https://microsoftlearning.github.io/AZ500-AzureSecurityTechnologies.ko-kr/Instructions/Labs/LAB_04_ConfiguringandSecuringACRandAKS.html
########################################################

# index.html 파일 생성
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Azure Container Instance</title>
</head>
<body>
  <h1>Simple static website</h1>
  <h2>Welcome to Azure Container Instances</h2>   
</body>
</html>

# Dockerfile 작성
FROM nginx:latest
COPY ./index.html /usr/share/nginx/html/index.html

# Dockerfile에서 ACR로 이미지 빌드 및 푸시 
### 이 명령은 로컬에 docker 설치가 필요없음
### . : 로컬 소스 디렉토리 경로 혹은 Git 리포지토리에 대한 URL임. 원격 tarball, Azure Container Registry 의 OCI 아티팩트 리포지토리를 지정할 수 있음.
image="myweb:1.0"
az acr build --image $image --registry $ACR_NAME \
  --file Dockerfile_web .

image="nginx:v1"
az acr build --image $image --registry $ACR_NAME \
  --file Dockerfile_nginx .

# ACR 이미지 확인
az acr repository list -n $ACR_NAME -o table

# ACR 의 컨테이너 이미지 삭제
az acr repository delete --name $ACR_NAME --image myweb:1.0
az acr repository delete --name $ACR_NAME --image nginx:

# ACR에 푸시한 이미지 실행
az acr run -r $ACR_NAME --cmd 'docker run -d $Registry/myweb:1.0' /dev/null

# ACR 이미지로 컨테이너 만들기
# containerGroupName="aci-acr"
# imageTag="$LOGIN_SERVER/$image"
# az container create -g $RESOURCE_GROUP -n $containerGroupName \
#   --image $imageTag --cpu 1 --memory 1 \
#   --registry-username $ACR_NAME \
#   --registry-password $ACR_PASSWORD \
#   --dns-name-label "[ACI_NAME]" --ports 80 \
#   --no-wait

# 컨테이너 인스턴스의 URL 가져오기
# az container show -g $RESOURCE_GROUP -n $containerGroupName \
#   --query ipAddress.fqdn -o tsv

########################################################
# Docker Hub 에 있는 컨테이너 이미지를 ACR 로 복사하기 
########################################################
az acr import --name $ACR_NAME --source docker.io/library/nginx:latest --image nginx:v1


########################################################
# AKS 생성 
########################################################
# 변수 설정 for aks ap01
RESOURCE_GROUP='01_dustinAksRg_1'
AKS_CLUSTER_NAME='dustinaks_cluster_ap01'
SUBSCRIPTION='4a14435c-14b8-42fa-99b5-3d513b52fc23' # multicloud enabling
VNET_NAME='dustinVnet_ap01'
SUBNET_NAME_NODE=$PRIV_SUB_NET1
SUBNET_NAME_POD=$PRIV_SUB_NET2
LOCATION='koreacentral'
NODE_COUNT=3
MAX_PODS=250


# AKS Cluster ap01 생성
az aks create \
    --name $AKS_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP \
    --location $LOCATION \
    --max-pods $MAX_PODS \
    --node-count $NODE_COUNT \
    --network-plugin azure \
    --vnet-subnet-id /subscriptions/$SUBSCRIPTION/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Network/virtualNetworks/$VNET_NAME/subnets/$SUBNET_NAME_NODE \
    --pod-subnet-id /subscriptions/$SUBSCRIPTION/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Network/virtualNetworks/$VNET_NAME/subnets/$SUBNET_NAME_POD \
    --enable-addons monitoring \
    --generate-ssh-keys


# AKS 목록 확인
az aks list --resource-group $RESOURCE_GROUP -o table


# 서브넷 ID 가져오기
# SUBNET_ID=$(az network vnet subnet show \
#   --resource-group $RESOURCE_GROUP \
#   --vnet-name $VNET_NAME \
#   --name $SUBNET_NAME \
#   --query id -o tsv)

# AKS 클러스터 연결 (k9s, kubectl 사용가능하게 됨.)
az aks get-credentials -g $RESOURCE_GROUP -n $AKS_CLUSTER_NAME

az aks show -g $RESOURCE_GROUP -n $AKS_CLUSTER_NAME --query "networkProfile.vnetSubnetId" -o tsv


# AKS Cluster 삭제
az aks delete --resource-group $RESOURCE_GROUP --name $AKS_CLUSTER_NAME --yes --no-wait

########################################################
# Private Cluster 생성하기
# Ref.
# - https://learn.microsoft.com/ko-kr/azure/aks/private-clusters?tabs=azure-porta
########################################################

# private subnet 에 worker node 를 구성했는데, 위 링크를 확인해야 할 필요가 있음.





########################################################
# AKS 클러스터에 신규 Node Pool 을 추가하기
########################################################
# Ref.
# - https://learn.microsoft.com/en-us/azure/aks/create-node-pools#add-a-node-pool-with-a-unique-subnet  (노드풀을 subnet 에 추가?)
########################################################

# 변수 설정
RESOURCE_GROUP='01_dustinAksRg_1'
AKS_CLUSTER_NAME='dustinaks_cluster_ap01'
NODE_POOL_NAME='nodepool02'
SUBNET_NAME_POD=$PRIV_SUB_NET2
#SUBNET_RESOURCE_ID="/subscriptions/$SUBSCRIPTION/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Network/virtualNetworks/$VNET_NAME/subnets/$SUBNET_NAME_POD"

# Node Pool (노드 풀) 추가 명령어 실행 (기존 pod subnet 에 추가했음.)
az aks nodepool add \
    --resource-group $RESOURCE_GROUP \
    --cluster-name $AKS_CLUSTER_NAME \
    --name $NODE_POOL_NAME \
    --node-count 4 \
    --vnet-subnet-id /subscriptions/$SUBSCRIPTION/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Network/virtualNetworks/$VNET_NAME/subnets/$SUBNET_NAME_NODE \
    --pod-subnet-id /subscriptions/$SUBSCRIPTION/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Network/virtualNetworks/$VNET_NAME/subnets/$SUBNET_NAME_POD \

# 변수 설정
RESOURCE_GROUP='01_dustinAksRg_1'
AKS_CLUSTER_NAME='dustinaks_cluster_ap01'
NODE_POOL_NAME='nodepool03'
SUBNET_NAME_POD=$PRIV_SUB_NET3

# Node Pool (노드 풀) 추가 명령어 실행 (신규 pod subnet 에 추가했음.)
az aks nodepool add \
    --resource-group $RESOURCE_GROUP \
    --cluster-name $AKS_CLUSTER_NAME \
    --name $NODE_POOL_NAME \
    --node-count 2 \
    --vnet-subnet-id /subscriptions/$SUBSCRIPTION/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Network/virtualNetworks/$VNET_NAME/subnets/$SUBNET_NAME_NODE \
    --pod-subnet-id /subscriptions/$SUBSCRIPTION/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Network/virtualNetworks/$VNET_NAME/subnets/$SUBNET_NAME_POD

# AKS Node pool 목록 확인
az aks nodepool list --resource-group $RESOURCE_GROUP --cluster-name $AKS_CLUSTER_NAME -o table

az aks nodepool list \
--resource-group $RESOURCE_GROUP \
--cluster-name $AKS_CLUSTER_NAME \
--query "[].{Name:name, NodeCount:count, VMSize:vmSize, MaxPods:maxPods, Mode:mode, OsType:osType, ProvisioningState:provisioningState, SubnetId:subnetId, NodePublicIP:nodePublicIP}" -o table


# AKS node pool 정보확인
az aks nodepool show --cluster-name $AKS_CLUSTER_NAME \
    --name $NODE_POOL_NAME \
    --resource-group $RESOURCE_GROUP


# AKS node pool 삭제
az aks nodepool delete --resource-group $RESOURCE_GROUP --cluster-name $AKS_CLUSTER_NAME --name $NODE_POOL_NAME --no-wait

########################################################
# worker node IP 확인
########################################################
# Node Resource Group 확인
NODE_RESOURCE_GROUP=$(az aks show --resource-group $RESOURCE_GROUP --name $AKS_CLUSTER_NAME --query nodeResourceGroup -o tsv)

# worker node List (목록) 확인
az vmss list --resource-group $NODE_RESOURCE_GROUP --output table
VMSS_NAME='aks-nodepool03-26136281-vmss'
az vmss list-instances --resource-group $NODE_RESOURCE_GROUP --name <VMSS 이름> -o table
az vmss list-instances --resource-group $NODE_RESOURCE_GROUP --name aks-nodepool03-26136281-vmss -o table

# worker node IP 확인
VMSS_NAME='aks-nodepool03-26136281-vmss'
az vmss nic list --resource-group $NODE_RESOURCE_GROUP --vmss-name $VMSS_NAME -o table
az vmss nic list --resource-group $NODE_RESOURCE_GROUP --vmss-name $VMSS_NAME -o table
az vmss nic list --resource-group $NODE_RESOURCE_GROUP --vmss-name $VMSS_NAME --query '[].ipConfigurations[].privateIPAddress' -o table

# worker node 접근방법
WORKER_NODE_NAME=aks-nodepool1-41486485-vmss000000
kubectl node-shell $WORKER_NODE_NAME # 이거 쓰자
kubectl debug node/$WORKER_NODE_NAME -it --image=mcr.microsoft.com/cbl-mariner/busybox:2.0


########################################################
# AKS 에 ACR 연결하기
########################################################
# Ref.
# - https://learn.microsoft.com/ko-kr/azure/aks/cluster-container-registry-integration?tabs=azure-cli (Good)
# - https://microsoftlearning.github.io/AZ500-AzureSecurityTechnologies.ko-kr/Instructions/Labs/LAB_04_ConfiguringandSecuringACRandAKS.html
########################################################

# ACR_NAME 가져오기
ACR_NAME=$(az acr list --resource-group $RESOURCE_GROUP --query '[].{Name:name}' --output tsv)
# AKS 에 ACR 연결
az aks update --resource-group $RESOURCE_GROUP --name $AKS_CLUSTER_NAME --attach-acr $ACR_NAME


# AKS 에 ACR 접근을 위한 Role 할당 -> 이걸로 ImagePullBackOff 가 해결 안됨.
AKS_VNET_ID=$(az network vnet show --name $VNET_NAME --resource-group $RESOURCE_GROUP --query id -o tsv)
AKS_MANAGED_ID=$(az aks show --name $AKS_CLUSTER_NAME --resource-group $RESOURCE_GROUP --query identity.principalId -o tsv)
az role assignment create --assignee $AKS_MANAGED_ID --role "Contributor" --scope $AKS_VNET_ID


az acr login -n dustinacr01 --expose-token
# 실행결과
# You can perform manual login using the provided access token below, for example: 'docker login loginServer -u 00000000-0000-0000-0000-000000000000 -p accessToken'
# {
#   "accessToken": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IklFTVI6TTdFRzpVV1JUOllIUEs6T1BZUTpZQjZNOjVUQ1M6S1RYRjpaQUhDOlZIRUw6RVVMUTo0SU1LIn0.eyJqdGkiOiI5M2MzNWJmNS0zMzEyLTQwYzktYTYyYS1kMGJkODIxMWIwZDQiLCJzdWIiOiJkc2J1cm4ua2ltQHRuc2Ftc3VuZy5jb20iLCJuYmYiOjE3MTg3OTc3ODgsImV4cCI6MTcxODgwOTQ4OCwiaWF0IjoxNzE4Nzk3Nzg4LCJpc3MiOiJBenVyZSBDb250YWluZXIgUmVnaXN0cnkiLCJhdWQiOiJkdXN0aW5hY3IwMS5henVyZWNyLmlvIiwidmVyc2lvbiI6IjEuMCIsInJpZCI6ImU2MDgzZTEyMDUxMDQxNzc5ZjkyYTZiNTMwZjZjYjlkIiwiZ3JhbnRfdHlwZSI6InJlZnJlc2hfdG9rZW4iLCJhcHBpZCI6IjA0YjA3Nzk1LThkZGItNDYxYS1iYmVlLTAyZjllMWJmN2I0NiIsInRlbmFudCI6IjJkOTZiZDdiLTg4ODAtNDM3Yy04ZDIzLTZhMjQ4YTJkMzMyMyIsInBlcm1pc3Npb25zIjp7ImFjdGlvbnMiOlsicmVhZCIsIndyaXRlIiwiZGVsZXRlIiwibWV0YWRhdGEvcmVhZCIsIm1ldGFkYXRhL3dyaXRlIiwiZGVsZXRlZC9yZWFkIiwiZGVsZXRlZC9yZXN0b3JlL2FjdGlvbiJdfSwicm9sZXMiOltdfQ.kYuJfTbNKx0b78J0azdVWVhfHSJHBNlM9Qb2nbsG6F3FWsMhlAc-CF57wyc2xQxxiTkJ3Lyt5PloY0uAG3sIM-LOPUEy4MImZZE-M-fZ9rlmNZbyq3LhR_iEXFSLvBJz2H6eTL2jQNWNpovUx1OzKG2eLtqysV02iI7cvJMMLzLAquGvMvg_EE3W5G0pSnDT1v82djoqrRAYakuSMS6NcFTuy17qn7pS1oy0c0hO6OBfBPFTiqTqHeQAIDen1LGSG6ihmeOBRh3SIcpOaA_rwX0VQsJrSu2AJvZtm8EX6cxUD3egVsoGz7tCaw5I5vdWGGavOxt0MdRj_xjLNQXRGw",
#   "loginServer": "dustinacr01.azurecr.io"
# }

########################################################
# ACR 이용해서 AKS 에 NGINX 배포 (Deployment)
# Ref: https://kubernetes.io/docs/reference/kubectl/generated/kubectl_create/kubectl_create_deployment/#examples
########################################################
kubectl create deployment my-web --image dustinacr01.azurecr.io/myweb:1.0 --replicas=3
또는
kubectl apply -f yaml/arc-nginx.yaml
