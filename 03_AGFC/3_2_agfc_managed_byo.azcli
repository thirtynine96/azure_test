########################################################
# Azure login
########################################################
az login
az account list -o table
az account show --query id --output tsv

## 구독 지정
SUBSCRIPTION='xxxxxxxxxxxxxxxxxx' # multicloud enabling
az account set -s $SUBSCRIPTION

# azure resource group 확인
az group list --output table

# RESOURCE_GROUP='network-na13d'
# RESOURCE_GROUP='aks-na13d'
# RESOURCE_GROUP='aks2-na13d-cluster'
RESOURCE_GROUP='01_dustinAksRg_1'

az group show --name $RESOURCE_GROUP --output table

##### 제일 많이 사용 ####
# azure resource 확인 (특정 resource group 에 속한)
az resource list --resource-group $RESOURCE_GROUP --output table



# -----------------------------------------
# 코드 설명
# -----------------------------------------
# 이 코드는 Azure에서 Application Gateway for Containers(AGFC)를 AKS 클러스터에 연결하여 배포하는 과정을 보여줍니다. 주요 단계는 다음과 같습니다.
# 1. 사전 작업으로 AKS 클러스터에서 Workload Identity를 활성화하고, AGFC 컨트롤러에 사용할 User Managed Identity를 생성합니다.
# 2. Helm 차트를 사용하여 AGFC 컨트롤러(alb-controller)를 AKS 클러스터에 설치합니다.
# 3. AGFC 리소스를 생성하고, 프론트엔드 IP 구성, 백엔드 풀 등의 리소스를 설정합니다.
# 4. AKS 클러스터가 배포된 가상 네트워크의 서브넷에 AGFC를 연결(association)합니다. 이를 위해 서브넷 위임 설정, Managed Identity 권한 부여 등의 작업을 수행합니다.
# 5. AGFC 리소스와 연결 리소스가 제대로 생성되었는지 확인합니다.
# 6. 필요 시 리소스를 삭제하고 정리하는 단계도 포함되어 있습니다.
# 이 스크립트를 통해 AGFC를 기존 AKS 클러스터와 연결하여 배포할 수 있으며, 이를 통해 L7 로드밸런싱, TLS 종료, WAF 등의 기능을 제공할 수 있습니다.



########################################################
# AGFC (Application Gateway For Container) 를 AKS cluster 에 연결해서 배포하기
# https://learn.microsoft.com/ko-kr/azure/application-gateway/for-containers/quickstart-deploy-application-gateway-for-containers-alb-controller?tabs=install-helm-windows
########################################################
ClusterIndex='-cl02'

########################################################
# 사전작업 : ALB Controller 설치하기
# 1. Worklaod identity 사용설정하기
########################################################
# Register required resource providers on Azure.
az provider register --namespace Microsoft.ContainerService
az provider register --namespace Microsoft.Network
az provider register --namespace Microsoft.NetworkFunction
az provider register --namespace Microsoft.ServiceNetworking

# Install Azure CLI extensions.
az extension add --name alb


# If using an existing cluster, ensure you enable Workload Identity support on your AKS cluster. Workload identities can be enabled via the following:
RESOURCE_GROUP='01-dustinAksRg'$ClusterIndex
AKS_CLUSTER_NAME='dustinaks-cluster-ap02'$ClusterIndex
az aks update -g $RESOURCE_GROUP -n $AKS_CLUSTER_NAME --enable-oidc-issuer --enable-workload-identity --no-wait
## 여기서 에러 발생
# Could not find service principal or user assigned MSI for roleassignment
# keyvaultid: None, enable_kv: None
# 해결책 : no-wait 옵션 없이 재실행해보자

# workload identity 를 사용하려면 OIDC 발급자와 Workload Identity 기능이 모두 활성화 되어 있어야 함.


# Check if the AKS cluster use workload identity
az aks show -g $RESOURCE_GROUP -n $AKS_CLUSTER_NAME --query "workloadIdentity"
# Check if the AKS cluster use OIDC issuer
az aks show -g $RESOURCE_GROUP -n $AKS_CLUSTER_NAME --query "oidcIssuerProfile"
# Check if the AKS cluster use RBAC authorization mode
az aks show -g $RESOURCE_GROUP -n $AKS_CLUSTER_NAME --query "enableRbac"
# Check if the AKS cluster use managed identity
az aks show -g $RESOURCE_GROUP -n $AKS_CLUSTER_NAME --query "enableManagedIdentity"

# az aks show -g $RESOURCE_GROUP -n $AKS_CLUSTER_NAME --query "identity"



AKS_IDENTITY=$(az aks show -g $RESOURCE_GROUP -n $AKS_CLUSTER_NAME --query "identity.principalId" -o tsv)
SUBSCRIPTION_ID='4a14435c-14b8-42fa-99b5-3d513b52fc23' # multicloud enabling
az role assignment create --assignee $AKS_IDENTITY --role "Network Contributor" --scope /subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP

########################################################
# ALB Controller 설치하기
# 2. ALB 컨트롤러에 대한 User Managed Identity 를 생성.
# 3. AKS 클러스터에서 사용할 Worklaod Identity 로 ID 를 Federation 함.
########################################################
RESOURCE_GROUP='01-dustinAksRg'$ClusterIndex
AKS_CLUSTER_NAME='dustinaks-cluster-ap02'$ClusterIndex
IDENTITY_RESOURCE_NAME='azure-alb-identity'

mcResourceGroup=$(az aks show --resource-group $RESOURCE_GROUP --name $AKS_CLUSTER_NAME --query "nodeResourceGroup" -o tsv)
mcResourceGroupId=$(az group show --name $mcResourceGroup --query id -otsv)

echo "Creating identity $IDENTITY_RESOURCE_NAME in resource group $RESOURCE_GROUP"
az identity create --resource-group $RESOURCE_GROUP --name $IDENTITY_RESOURCE_NAME
principalId="$(az identity show -g $RESOURCE_GROUP -n $IDENTITY_RESOURCE_NAME --query principalId -otsv)"

echo "Waiting 60 seconds to allow for replication of the identity..."
sleep 60

echo "Apply Reader role to the AKS managed cluster resource group for the newly provisioned identity"
az role assignment create --assignee-object-id $principalId --assignee-principal-type ServicePrincipal --scope $mcResourceGroupId --role "acdd72a7-3385-48ef-bd42-f606fba81ae7" # Reader role

echo "Set up federation with AKS OIDC issuer"
AKS_OIDC_ISSUER="$(az aks show -n "$AKS_CLUSTER_NAME" -g "$RESOURCE_GROUP" --query "oidcIssuerProfile.issuerUrl" -o tsv)"
az identity federated-credential create --name "azure-alb-identity" --identity-name "$IDENTITY_RESOURCE_NAME" --resource-group $RESOURCE_GROUP --issuer "$AKS_OIDC_ISSUER" --subject "system:serviceaccount:azure-alb-system:alb-controller-sa"


########################################################
# ALB Controller 설치하기
# 4. helm chart 로 설치
########################################################
kubectl create namespace helm-ns
HELM_NAMESPACE='helm-ns'
CONTROLLER_NAMESPACE='azure-alb-system'
az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_CLUSTER_NAME
helm install alb-controller oci://mcr.microsoft.com/application-lb/charts/alb-controller --namespace $HELM_NAMESPACE --version 1.0.2 --set albController.namespace=$CONTROLLER_NAMESPACE --set albController.podIdentity.clientID=$(az identity show -g $RESOURCE_GROUP -n azure-alb-identity --query clientId -o tsv)

# alb 컨트롤러 설치확인
kubectl get pods -n $CONTROLLER_NAMESPACE

# GatewayClass에 Valid GatewayClass라는 조건이 있는지 확인해야 합니다. 
# 이는 기본 GatewayClass가 설정되었으며 이 GatewayClass를 참조하는 모든 게이트웨이 리소스가 ALB 컨트롤러에 의해 자동으로 관리됨을 나타냅니다.
kubectl get gatewayclass azure-alb-external -o yaml



# 여기까지가 ALB Controller 설치 과정임.




########################################################
# 5. Azure 에서 Application Gateway for Containers 배포하기
# - https://learn.microsoft.com/en-us/azure/application-gateway/for-containers/quickstart-create-application-gateway-for-containers-byo-deployment?tabs=existing-vnet-subnet
# - Bring your own deployment 방식으로 배포하는 방법임.
########################################################

# ----------------------------------------- 
# 5.1 환경설정
# ----------------------------------------- 

# Prepare your virtual network / subnet for Application Gateway for Containers
RESOURCE_GROUP='01-dustinAksRg'$ClusterIndex
AKS_CLUSTER_NAME='dustinaks-cluster-ap02'$ClusterIndex
AGFC_NAME='dustin-agfc-test'

# 리소스 그룹의 모든 vnet 확인
az network vnet list
az network vnet list -g $RESOURCE_GROUP


# ----------------------------------------- 
# 5.2 Application Gateway for Containers 리소스 배포
# ----------------------------------------- 
az network alb create -g $RESOURCE_GROUP -n $AGFC_NAME


# ----------------------------------------- 
# 5.3 프론트엔드 리소스 배포
# ----------------------------------------- 
FRONTEND_NAME='nginx-frontend-test'
az network alb frontend create -g $RESOURCE_GROUP -n $FRONTEND_NAME --alb-name $AGFC_NAME


# ----------------------------------------- 
# 5.4 연결 리소스 배포
# ----------------------------------------- 

# aks 의 설정 -> 네트워킹 -> virtual network 통합에서 확인
VNET_NAME='aks-vnet-35630080'
# aks 의 vnet 정보를 확인하면 리소스 그룹을 확인할 수 있음.
RESOURCE_GROUP='MC_01-dustinAksRg-cl02_dustinaks-cluster-ap02-cl02_koreacentral' 
# aks 의 설정 -> 네트워킹 -> virtual network 통합에서 확인
ALB_SUBNET_NAME='aks-subnet'


# 5.4.1 서브넷 위임 설정 (기존 서브넷 업데이트)
az network vnet subnet update \
  --resource-group $RESOURCE_GROUP \
  --name $ALB_SUBNET_NAME \
  --vnet-name $VNET_NAME \
  --delegations 'Microsoft.ServiceNetworking/trafficControllers'
ALB_SUBNET_ID=$(az network vnet subnet list --resource-group $RESOURCE_GROUP --vnet-name $VNET_NAME --query "[?name=='$ALB_SUBNET_NAME'].id" --output tsv)
echo $ALB_SUBNET_ID


# 5.4.2 Managed Identity 에 권한 위임
IDENTITY_RESOURCE_NAME='azure-alb-identity'
resourceGroupId=$(az group show --name $RESOURCE_GROUP --query id -otsv)
principalId=$(az identity show -g $RESOURCE_GROUP -n $IDENTITY_RESOURCE_NAME --query principalId -otsv)

# AppGW for Containers Configuration Manager 역할 할당
az role assignment create --assignee-object-id $principalId --assignee-principal-type ServicePrincipal --scope $resourceGroupId --role "fbc52c3f-28ad-4303-a892-8a056630b8f1"

# Network Contributor 권한 할당
az role assignment create --assignee-object-id $principalId --assignee-principal-type ServicePrincipal --scope $ALB_SUBNET_ID --role "4d97b98b-1d4f-4787-a291-c67834d212e7"


# 5.4.3 연결 리소스 생성
ASSOCIATION_NAME='myAssociationForCl02'
az network alb association create -g $RESOURCE_GROUP -n $ASSOCIATION_NAME --alb-name $AGFC_NAME --subnet $ALB_SUBNET_ID


# ----------------------------------------- 
# 5.5 결과 확인
# ----------------------------------------- 

# Application Gateway for Containers 리소스 확인
az network alb show -g $RESOURCE_GROUP -n $AGFC_NAME

# 연결 리소스 확인
az network alb association show -g $RESOURCE_GROUP -n $ASSOCIATION_NAME --alb-name $AGFC_NAME



# NGIX SVC, Deployment 생성
# 출처 : https://github.com/JACKsHOT12/JacksCloud/blob/main/Gateway%20and%20HTTp%20route%20config%201.txt
kubectl apply -f ./yaml/deployment1.yaml
kubectl apply -f ./yaml/deployment2.yaml

# Gateway 리소스 정의
kubectl apply -f - <<EOF
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: alb-test-gateway
  namespace: alb-test-infra
  annotations:
    alb.networking.azure.io/alb-id: '/subscriptions/4a14435c-14b8-42fa-99b5-3d513b52fc23/resourceGroups/01-dustinAksRg-cl02/providers/Microsoft.ServiceNetworking/trafficControllers/dustin-agfc-test'
spec:
  gatewayClassName: azure-alb-external
  listeners:
    - name: http
      port: 80
      protocol: HTTP
      allowedRoutes:
        namespaces:
          from: Same
  addresses:
  - type: alb.networking.azure.io/alb-frontend
    value: 'nginx-frontend-test'
EOF

# HTTPRouter 리소스 정의
# kubectl apply -f - <<EOF
# apiVersion: gateway.networking.k8s.io/v1
# kind: HTTPRoute
# metadata:
#   name: alb-test-httprouter
#   namespace: alb-test-infra
# spec:
#   parentRefs:
#   - name: alb-test-gateway
#   rules:
#   - backendRefs:
#     - name: web-app-service
#       port: 80
# EOF

# HTTPRouter 리소스 정의 (Multi URI 셋팅)
# - 2 개의 Service 로 라우팅 하는 예제
# - 기본 경로 / 는 web-app-service 라우팅 함.
# - /app1 은 web-app-service 의 80 포트를 사용하고, /app2 는 nginx-v1-svc 의 8080 포트를 사용함.
# - Nginx 서버에도 /app1, /app2 경로를 설정해야 함.
kubectl apply -f - <<EOF
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: alb-test-httprouter
  namespace: alb-test-infra
spec:
  parentRefs:
  - name: alb-test-gateway
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /app1
    backendRefs:
    - name: web-app-service
      port: 80
  - matches:
    - path:
        type: PathPrefix
        value: /app2
    backendRefs:
    - name: nginx-v1-svc
      port: 8080
  - backendRefs:
    - name: web-app-service
      port: 80
EOF




# ----------------------------------------- 
# 5.6 리소스 삭제 및 정리
# ----------------------------------------- 
# 연결 리소스 삭제
az network alb association delete -g $RESOURCE_GROUP -n $ASSOCIATION_NAME --alb-name $AGFC_NAME

# 프론트엔드 리소스 삭제
az network alb frontend delete -g $RESOURCE_GROUP -n $FRONTEND_NAME --alb-name $AGFC_NAME

# Application Gateway for Containers 리소스 삭제
az network alb delete -g $RESOURCE_GROUP -n $AGFC_NAME

# 서브넷 위임 제거 (필요한 경우)
az network vnet subnet update \
  --resource-group $RESOURCE_GROUP \
  --name $ALB_SUBNET_NAME \
  --vnet-name $VNET_NAME \
  --remove delegations

# 리소스 그룹 삭제 (필요한 경우)
az group delete --name $RESOURCE_GROUP --yes



########################################################
# 부하분산 설정하기
########################################################
# https://learn.microsoft.com/en-us/azure/application-gateway/for-containers/how-to-traffic-splitting-gateway-api?tabs=alb-managed


########################################################
# 참고
########################################################


# NGIX URI 설정 (NGINX 서버의 아래 경로에 이 설정이 필요함.)
root@web-app-deployment-67ddf4979c-kcmf5:/etc/nginx/conf.d# cat default.conf
server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }
    
    location /app2 {
        root   /usr/share/nginx/html;
        try_files  /app2.html =404;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}



# TODO: 아래 내용도 고려해보길 바람.
# 1. Gateway 리소스 생성
# apiVersion: applicationgateway.networking.k8s.io/v1
# kind: Gateway
# metadata:
#   name: alb-test-gateway
#   namespace: alb-test-infra
# spec:
#   gatewayClassName: azure-alb-external
#   type: Public
#   listeners:
#   - name: http
#     port: 80
#     protocol: HTTP
#   routes:
#   - name: default
#     http:
#       paths:
#         - pathType: Prefix
#           value: /
#           backend:
#             service:
#               name: my-service
#               port:
#                 number: 80
#   defaultBackendService:
#     service:
#       name: default-backend
#       port:
#         number: 80
#   frontendIPConfigurations:
#   - name: public-ip
#     publicIPAddress:
#       id: /subscriptions/<subscriptionId>/resourceGroups/<resourceGroupName>/providers/Microsoft.Network/publicIPAddresses/<publicIpName>
#   # sslCertificates 및 trustedRootCertificates 섹션은 필요한 경우 추가